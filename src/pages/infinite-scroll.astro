---
import "../styles/articles.css";

export const prerender = false;

const initialPage = parseInt(Astro.url.searchParams.get("page") || "1");
const pageSize = 10;

const fetchArticles = async (page) => {
  const response = await fetch(
    `${import.meta.env.STRAPI_API_URL}/api/articles?pagination[page]=${page}&pagination[pageSize]=${pageSize}&populate=*`
  );
  const data = await response.json();

  const { data: fetchedArticles, meta } = data;
  return {
    articles: fetchedArticles,
    hasMore: meta.pagination.page < meta.pagination.pageCount,
    totalPages: meta.pagination.pageCount,
  };
};

const {
  articles: initialArticles,
  hasMore: initialHasMore,
  totalPages,
} = await fetchArticles(initialPage);
---

<div class="articles-container">
  <h1>Latest Articles</h1>

  <div class="articles-grid">
    {
      initialArticles.map((article) => (
        <article class="article">
          <h2>{article.title}</h2>
          <div class="article-content" set:html={article.content} />
        </article>
      ))
    }
  </div>

  <div id="article-loader" style="display: none;">Loading more articles...</div>
</div>

<script define:vars={{ initialHasMore, initialPage, pageSize, totalPages }}>
  let isLoading = false;
  let hasMore = initialHasMore;
  let currentPage = initialPage;

  const articleLoader = document.getElementById("article-loader");
  const articlesGrid = document.querySelector(".articles-grid");

  const fetchMoreArticles = async () => {
    if (isLoading || !hasMore) return;

    isLoading = true;
    articleLoader.style.display = "block";

    try {
      const response = await fetch(
        `/api/articles?page=${currentPage + 1}&pageSize=${pageSize}`
      );
      const data = await response.json();

      if (!data.articles || data.articles.length === 0) {
        hasMore = false;
      } else {
        currentPage++;
        data.articles.forEach((article) => {
          const articleElement = document.createElement("article");
          articleElement.className = "article";
          articleElement.innerHTML = `
            <h2>${article.title}</h2>
            <div class="article-content">${article.content}</div>
          `;
          articlesGrid.appendChild(articleElement);
        });
        hasMore = currentPage < totalPages;
      }
      console.log(
        `Fetched page ${currentPage}/${totalPages}, hasMore: ${hasMore}`
      );
    } catch (error) {
      console.error("Error fetching articles:", error);
      hasMore = false;
    } finally {
      isLoading = false;
      articleLoader.style.display = hasMore ? "none" : "block";
      articleLoader.textContent = hasMore
        ? "Loading more articles..."
        : "No more articles to load.";

      if (!hasMore) {
        window.removeEventListener("scroll", handleScroll);
        console.log("No more articles, removed scroll listener");
      }
    }
  };

  const handleScroll = () => {
    if (isLoading || !hasMore) return;

    const scrollHeight = document.documentElement.scrollHeight;
    const scrollTop = window.scrollY || document.documentElement.scrollTop;
    const clientHeight =
      window.innerHeight || document.documentElement.clientHeight;

    if (scrollTop + clientHeight >= scrollHeight - 200) {
      console.log(`Triggering fetch for page ${currentPage + 1}`);
      fetchMoreArticles();
    }
  };

  window.addEventListener("scroll", handleScroll);
</script>
